- register_javascripts "barclamps/cinder/form"

= attributes_for @proposal do
  .panel-sub
    = header @dep_raw, true

  .panel-body
    = instance_field :database
    = instance_field :rabbitmq
    = instance_field :keystone
    = instance_field :glance

    = select_field %w(volume volume_type), :collection => :volume_type_for_cinder

    #raw_container
      %fieldset
        %legend
          = t('.volume.disk_parameters')

        = select_field %w(volume cinder_raw_method), :collection => :raw_methods_for_cinder
        = string_field %w(volume volume_name)

    #local_container
      %fieldset
        %legend
          = t('.volume.file_parameters')

        = string_field %w(volume local_file)
        = integer_field %w(volume local_size)
        = string_field %w(volume volume_name)

    #netapp_container
      %fieldset
        %legend
          = t('.volume.netapp_parameters')

        = select_field %w(volume netapp netapp_driver), :collection => :netapp_drivers_for_cinder
        = string_field %w(volume netapp netapp_server_hostname)
        = select_field %w(volume netapp netapp_transport_type), :collection => :netapp_transports_for_cinder
        = integer_field %w(volume netapp netapp_server_port)
        = string_field %w(volume netapp netapp_login)
        = string_field %w(volume netapp netapp_password)
        = string_field %w(volume netapp netapp_storage_service)
        = string_field %w(volume netapp netapp_vfiler)

    #emc_container
      %fieldset
        %legend
          = t('.volume.emc_parameters')

        = string_field %w(volume emc ecom_server_ip)
        = integer_field %w(volume emc ecom_server_port)
        = string_field %w(volume emc ecom_server_username)
        = string_field %w(volume emc ecom_server_password)
        = string_field %w(volume emc emc_storage_type)

    #eqlx_container
      %fieldset
        %legend
          = t('.volume.eqlx_parameters')

        = string_field %w(volume eqlx san_ip)
        = string_field %w(volume eqlx san_login)
        = string_field %w(volume eqlx san_password)
        = string_field %w(volume eqlx eqlx_group_name)
        = string_field %w(volume eqlx eqlx_pool)
        = boolean_field %w(volume eqlx san_thin_provision)
        = boolean_field %w(volume eqlx eqlx_use_chap)
        = string_field %w(volume eqlx eqlx_chap_login)
        = string_field %w(volume eqlx eqlx_chap_password)
        = integer_field %w(volume eqlx eqlx_ssh_keepalive_interval)
        = integer_field %w(volume eqlx eqlx_cli_timeout)

    #rbd_container
      %fieldset
        %legend
          = t('.volume.rbd_parameters')

        = string_field %w(volume rbd pool)
        = string_field %w(volume rbd user)

    #manual_container
      %fieldset
        %legend
          = t(".volume.manual_parameters")

        .alert.alert-warning
          = t(".volume.manual.not_supported")

        = string_field %w(volume manual driver)
        %span.help-block
          = t(".volume.manual.driver_hint")

        = text_field %w(volume manual config), :size => "80x5"
        %span.help-block
          = t(".volume.manual.config_hint")

    %fieldset
      %legend
        = t(".ssl.header")

      = select_field %w(api protocol), :collection => :api_protocols_for_cinder, "data-sslprefix" => "ssl", "data-sslcert" => "/etc/cinder/ssl/certs/signing_cert.pem", "data-sslkey" => "/etc/cinder/ssl/private/signing_key.pem"

      #ssl_container
        = boolean_field %w(ssl generate_certs)
        = string_field %w(ssl certfile)
        = string_field %w(ssl keyfile)
        = boolean_field %w(ssl insecure)
        = boolean_field %w(ssl cert_required), "data-enabler" => "true", "data-enabler-target" => "#ssl_ca_certs"
        = string_field %w(ssl ca_certs)

    = render "barclamp/git/pfsdeps"
