= attributes_for @proposal do
  .panel-sub
    = header @dep_raw, true

  .panel-body
    = instance_field :database
    = instance_field :rabbitmq
    = instance_field :keystone
    = instance_field :glance

    %script#backend_entries{ :type => "text/x-handlebars-template" }
      %div#cinder_backends
        {{#each entries}}
        %ul.list-group(id="volume-entry-{{@index}}")
          %li.list-group-item.active
            %h3.list-group-item-heading
              Backend: {{ backend_name }}
              {{#if ../is_only_backend }}
              {{else}}
              = link_to icon_tag("trash"), "#", :class => "volume-backend-delete pull-right delete", "data-volumeid" => "{{@index}}"
              {{/if}}

          {{#if_eq backend_driver 'raw'}}
          %li.list-group-item
            %fieldset
              %legend
                = t('.volume.raw_parameters')

              = select_field %w(volume {{@index}} raw cinder_raw_method), :collection => :raw_methods_for_cinder
              = string_field %w(volume {{@index}} raw volume_name)

          {{/if_eq}}
          {{#if_eq backend_driver 'local'}}
          %li.list-group-item
            %fieldset
              %legend
                = t('.volume.local_parameters')

              = string_field %w(volume {{@index}} local file_name)
              = integer_field %w(volume {{@index}} local file_size)
              = string_field %w(volume {{@index}} local volume_name)

          {{/if_eq}}
          {{#if_eq backend_driver 'netapp'}}
          %li.list-group-item
            %fieldset
              %legend
                = t('.volume.netapp_parameters')

              = select_field %w(volume {{@index}} netapp storage_family), :collection => :netapp_storage_family
              = select_field %w(volume {{@index}} netapp storage_protocol), :collection => :netapp_storage_protocol, "data-netapp-storage-protocol" => true, "data-volumeid" => "{{@index}}"
              = string_field %w(volume {{@index}} netapp netapp_server_hostname)
              = select_field %w(volume {{@index}} netapp netapp_transport_type), :collection => :netapp_transports_for_cinder
              = integer_field %w(volume {{@index}} netapp netapp_server_port)
              = string_field %w(volume {{@index}} netapp netapp_login)
              = password_field %w(volume {{@index}} netapp netapp_password)
              = string_field %w(volume {{@index}} netapp netapp_vfiler)

              %div{ :id => "netapp_nfs_container_{{@index}}", "data-volumeid" => "{{@index}}"}
                = string_field %w(volume {{@index}} netapp vserver)
                = text_field %w(volume {{@index}} netapp nfs_shares), :size => "80x5"

                %span.help-block
                = t(".volume.netapp.nfs_shares_config_hint")

          {{/if_eq}}
          {{#if_eq backend_driver 'emc'}}
          %li.list-group-item
            %fieldset
              %legend
                = t('.volume.emc_parameters')

              = string_field %w(volume {{@index}} emc ecom_server_ip)
              = string_field %w(volume {{@index}} emc masking_view)
              = integer_field %w(volume {{@index}} emc ecom_server_port)
              = string_field %w(volume {{@index}} emc ecom_server_username)
              = password_field %w(volume {{@index}} emc ecom_server_password)
              = string_field %w(volume {{@index}} emc emc_storage_type)

          {{/if_eq}}
          {{#if_eq backend_driver 'eqlx'}}
          %li.list-group-item
            %fieldset
              %legend
                = t('.volume.eqlx_parameters')

              = string_field %w(volume {{@index}} eqlx san_ip)
              = string_field %w(volume {{@index}} eqlx san_login)
              = password_field %w(volume {{@index}} eqlx san_password)
              = string_field %w(volume {{@index}} eqlx eqlx_group_name)
              = string_field %w(volume {{@index}} eqlx eqlx_pool)
              = boolean_field %w(volume {{@index}} eqlx san_thin_provision)
              = boolean_field %w(volume {{@index}} eqlx eqlx_use_chap)
              = string_field %w(volume {{@index}} eqlx eqlx_chap_login)
              = password_field %w(volume {{@index}} eqlx eqlx_chap_password)
              = integer_field %w(volume {{@index}} eqlx eqlx_cli_timeout)

          {{/if_eq}}
          {{#if_eq backend_driver 'rbd'}}
          %li.list-group-item
            %fieldset
              %legend
                = t('.volume.rbd_parameters')

              = boolean_field %w(volume {{@index}} rbd use_crowbar), "data-showit" => "true", "data-showit-target" => "#rbd_config_file_{{@index}}", "data-showit-direct" => "true"
              #rbd_config_file_{{@index}}
                = string_field %w(volume {{@index}} rbd config_file)

              = string_field %w(volume {{@index}} rbd pool)
              = string_field %w(volume {{@index}} rbd user)

          {{/if_eq}}
          {{#if_eq backend_driver 'manual'}}
          %li.list-group-item
            %fieldset
            %legend
              = t(".volume.manual_parameters")

            .alert.alert-warning
              = t(".volume.manual.not_supported")

            = string_field %w(volume {{@index}} manual driver)
            %span.help-block
              = t(".volume.manual.driver_hint")

            = text_field %w(volume {{@index}} manual config), :size => "80x5"
            %span.help-block
              = t(".volume.manual.config_hint")
          {{/if_eq}}
        {{/each}}

    %fieldset
      %legend
        = t(".volume.listheader")

      - if !@proposal.pretty_attributes.volume_defaults.use_multi_backend
        = select_field ["volume", 0, "backend_driver"], :collection => :volume_driver_for_cinder

      %div#cinder_backends
        = t(".volume.loading_text")

    - if @proposal.pretty_attributes.volume_defaults.use_multi_backend
      %fieldset
        %legend
          = t(".volume.addheader")

        = select_field %w(volume backend_driver), :collection => :volume_driver_for_cinder
        = string_field %w(volume backend_name)
        %span.help-block
          = t(".volume.backend_name_hint")

        %div.form-group.pull-left
          %input(id='add_cinder_backend' class="form-control" type="button" value="Add Backend")

    %fieldset
      %legend
        = t(".ssl.header")

      = select_field %w(api protocol), :collection => :api_protocols_for_cinder, "data-sslprefix" => "ssl", "data-sslcert" => "/etc/cinder/ssl/certs/signing_cert.pem", "data-sslkey" => "/etc/cinder/ssl/private/signing_key.pem"

      #ssl_container
        = boolean_field %w(ssl generate_certs)
        = string_field %w(ssl certfile)
        = string_field %w(ssl keyfile)
        = boolean_field %w(ssl insecure)
        = boolean_field %w(ssl cert_required), "data-enabler" => "true", "data-enabler-target" => "#ssl_ca_certs"
        = string_field %w(ssl ca_certs)

    = render "barclamp/git/pfsdeps"
